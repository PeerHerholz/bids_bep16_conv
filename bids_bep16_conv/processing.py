from subprocess import check_call
import os


def dipy_dti(input_files, bval, bvec, mask, outdir):
    """
    Setup DIPY dipy_fit_DTI command.

    Parameters
    ----------
    input_files : str
        Path to dwi image.
    bval : str
        Path to bval image.
    bvec : str
        Path to bvec image.
    mask: str
        Path to mask image.
    outdir: str
        Output path.

    Returns
    -------
    Output files generated by dipy_fit_DTI in specified output directory .

    Examples
    --------
    Run dipy_fit_DTI on local data and save it to the Desktop.

    >>> dipy_dti('sub-01_desc-preproc_dwi.nii.gz',
                 'sub-01_desc-preproc_dwi.bval',
                 'sub-01_desc-preproc_dwi.bvec',
                 'sub-01_desc-brain_mask.nii.gz',
                 '/home/user/Desktop)
    """

    # create the command
    cmd = ["dipy_fit_dti", input_files, bval, bvec, mask,
           "--out_dir", outdir
           ]
    check_call(cmd)
    return


def dipy_csd(input_files, bval, bvec, mask, outdir):
    """
    Setup DIPY dipy_fit_CSD command.

    Parameters
    ----------
    input_files : str
        Path to dwi image.
    bval : str
        Path to bval image.
    bvec : str
        Path to bvec image.
    mask: str
        Path to mask image.
    outdir: str
        Output path.

    Returns
    -------
    Output files generated by dipy_fit_CSD in specified output directory .

    Examples
    --------
    Run dipy_fit_CSD on local data and save it to the Desktop.

    >>> dipy_csd('sub-01_desc-preproc_dwi.nii.gz',
                 'sub-01_desc-preproc_dwi.bval',
                 'sub-01_desc-preproc_dwi.bvec',
                 'sub-01_desc-brain_mask.nii.gz',
                 '/home/user/Desktop)
    """
    
    # create the command
    cmd = ["dipy_fit_csd", input_files, bval, bvec, mask,
           "--out_dir", outdir, "--extract_pam_values"
           ]

    check_call(cmd)
    return


def mrtrix_dti(input_files, bval, bvec, mask, outdir):
    """
    Setup a succession of MRTRIX dwi2tensor & tensor2metric command.

    Parameters
    ----------
    input_files : str
        Path to dwi image.
    bval : str
        Path to bval image.
    bvec : str
        Path to bvec image.
    mask: str
        Path to mask image.
    outdir: str
        Output path.

    Returns
    -------
    Output files generated by dwi2tensor & tensor2metric in specified output directory .

    Examples
    --------
    Run dwi2tensor & tensor2metric on local data and save it to the Desktop.

    >>> mrtrix_dti('sub-01_desc-preproc_dwi.nii.gz',
                   'sub-01_desc-preproc_dwi.bval',
                   'sub-01_desc-preproc_dwi.bvec',
                   'sub-01_desc-brain_mask.nii.gz',
                   '/home/user/Desktop)
    """
   
    # create the output directory
    os.makedirs(outdir, exist_ok=True)

    # define the file names for the tensor & b0 file
    tensor_file = outdir + input_files.split('/')[-1].replace("desc-preproc_dwi", "param-tensor_model")
    b0_file = outdir + input_files.split('/')[-1].replace("desc-preproc_dwi", "param-bzero_model")

    # create the dwi2tensor command
    cmd = ["dwi2tensor", input_files, tensor_file, "--mask", mask,
           "-fslgrad", bvec, bval, "-b0", b0_file]
    check_call(cmd)

    # define the file names for the mdp files
    adc_image = tensor_file.replace('param-tensor_model', 'param-md_mdp')
    fa_image = tensor_file.replace('param-tensor_model', 'param-fa_mdp')
    ad_image = tensor_file.replace('param-tensor_model', 'param-ad_mdp')
    rd_image = tensor_file.replace('param-tensor_model', 'param-rd_mdp')

    # create the tensor2metric command
    cmd = ["tensor2metric", tensor_file, "--mask", mask,
           "-adc", adc_image, "-fa", fa_image, "-ad", ad_image,
           "-rd", rd_image]
    check_call(cmd)

    return
