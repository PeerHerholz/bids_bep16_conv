
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_HBN_download.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_HBN_download.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_HBN_download.py:


Fetching the HBN example dataset
================================
This example demonstrates how to use :mod:`bids_bep16_conv.datasets` to fetch
the HBN example dataset.

.. GENERATED FROM PYTHON SOURCE LINES 10-27

Much of the functionality of the ``bids_bep16_conv`` toolbox relies on downloading
candidate example datasets. Each dataset has its own functions to check and evaluate QC
files to find suitable participants, as well as dedicated download functions that will obtain
the data from the BIDS connectivity OSF project. The respective files differ between example datasets
and respectively utilized pipeline/workflow but are obtained in a way that they confirm
to BIDS common derivatives, specifically as input for tools that generate BEP16-related output.

Here we show how the HBN example dataset was generated and can be assessed, via describing the respective
workflow and utilized ``functions``.

The ``HBN dataset`` and its derivatives are provided openly via the
`FCP-INDI AWS bucket <https://fcp-indi.s3.amazonaws.com/index.html#data/Projects/HBN/>`_, entailing various
pipeline/workflow outputs. Here, we are going to focus on the preprocessing conducted via ``QSIprep``.

At first, we need to find a suitable ``participant``, in terms of overall data quality, Luckily, ``QSIprep``
provides a respective file that includes a ``quality control score`` for each ``participant``.
Using the :func:`datasets.get_HBN_qc` function we can obtain and check this file:

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: default


    from bids_bep16_conv import datasets

    HBN_qc_file = datasets.get_HBN_qc(return_df=True)
    print(HBN_qc_file)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Data will be downloaded to bids_bep16_datasets/HBN/source-HBN_desc-qsiprep_participants.tsv
      0%|          | 0/210607 [00:00<?, ?it/s]     31%|###1      | 64.0k/206k [00:00<00:00, 505kB/s]    100%|##########| 206k/206k [00:00<00:00, 1.06MB/s]
                subject_id scan_site_id  ... dl_qc_score            site_variant
    0     sub-NDARAA306NT2           RU  ...       0.470    RU_64dir_Most_Common
    1     sub-NDARAA536PTU           SI  ...       0.701      SI_64dir_Obliquity
    2     sub-NDARAA947ZG5         CBIC  ...       0.509  CBIC_64dir_Most_Common
    3     sub-NDARAA948VFH           RU  ...       0.979    RU_64dir_Most_Common
    4     sub-NDARAB055BPR           RU  ...       0.035    RU_64dir_Most_Common
    ...                ...          ...  ...         ...                     ...
    2129  sub-NDARZW873DN3         CBIC  ...       0.982  CBIC_64dir_Most_Common
    2130  sub-NDARZX163EWC         CBIC  ...       0.993  CBIC_64dir_Most_Common
    2131  sub-NDARZY101JNB         CBIC  ...       0.992  CBIC_64dir_Most_Common
    2132  sub-NDARZZ740MLM           RU  ...       0.014    RU_64dir_Most_Common
    2133  sub-NDARZZ810LVF         CBIC  ...       0.861  CBIC_64dir_Most_Common

    [2134 rows x 12 columns]




.. GENERATED FROM PYTHON SOURCE LINES 34-42

What we get is a :class:`~pandas.DataFrame` entailing the content of ``QSIprep``'s ``participant.tsv`` file.
In contains various ``demographic variables`` but also the ``Quality Control scores`` we are interested in.
In order to make the respective evaluation more straightforward, we can use the :func:`datasets.get_HBN_qc` function,
which will sort the :class:`~pandas.DataFrame` based on the ``dl_qc_score`` variable. We can furthermore indicate how
many ``participants`` with the highest score, as well as if the sorted :class:`~pandas.DataFrame`
and a ``raincloud plot`` of the ``dl_qc_score`` variable across the ``dataset`` should be returned.

Here, we going to get the ``participants`` that have the ``3`` highest scores, the sorted :class:`~pandas.DataFrame` and the ``raincloud plot``.

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default


    HBN_qc_participants_df_sorted = datasets.eval_HBN_qc(HBN_qc_file,
                                                         n_high_participants=3,
                                                         visualize=True, return_sorted_df=True)




.. image-sg:: /auto_examples/images/sphx_glr_plot_HBN_download_001.png
   :alt: plot HBN download
   :srcset: /auto_examples/images/sphx_glr_plot_HBN_download_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The 3 participants with the highest QC score are: 
    418     sub-NDAREK918EC2
    2002    sub-NDARYM277DEA
    1151    sub-NDARMV189NXG
    Name: subject_id, dtype: object
    /usr/share/miniconda/envs/bids_bep16_conv/lib/python3.9/site-packages/seaborn/_core.py:1303: UserWarning: Vertical orientation ignored with only `x` specified.
      warnings.warn(single_var_warning.format("Vertical", "x"))
    /usr/share/miniconda/envs/bids_bep16_conv/lib/python3.9/site-packages/seaborn/_core.py:1303: UserWarning: Vertical orientation ignored with only `x` specified.
      warnings.warn(single_var_warning.format("Vertical", "x"))
    /usr/share/miniconda/envs/bids_bep16_conv/lib/python3.9/site-packages/seaborn/_core.py:1303: UserWarning: Vertical orientation ignored with only `x` specified.
      warnings.warn(single_var_warning.format("Vertical", "x"))




.. GENERATED FROM PYTHON SOURCE LINES 48-60

As you can see in the ``raincloud plot``, the score has a rather interesting distribution but the
above obtained :class:`~pandas.Series` indicates that ``participant`` ``sub-NDAREK918EC2`` has the
highest ``dl_qc_score``. However, upon closer inspection it was noticed that this participant doesn't 
have all files necessary to test multiple analysis pipelines and the respective conversion to BEP16.
Thus, the ``participant``'s data with the second highest ``dl_qc_score`` was utilized. This refers to
``sub-NDARYM277DEA``'s `QSIprep outputs <https://fcp-indi.s3.amazonaws.com/index.html#data/Projects/HBN/BIDS_curated/derivatives/qsiprep/sub-NDARYM277DEA/>`_
which were downloaded from the `FCP-INDI AWS bucket <https://fcp-indi.s3.amazonaws.com/index.html#data/Projects/HBN/>`_ and subsequently
uploaded to the `dataset component <https://osf.io/bz2vj/>`_ of the `BIDS connectivity project <https://pestillilab.github.io/bids-connectivity/>`_ `OSF project <https://osf.io/u4g5p/#!>`_
for access and management.

That being said, we can use :func:`datasets.download_HBN` ``function`` to download the respective ``data``, for example
to our ``Desktop``.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default


    HBN_dataset_path = datasets.download_HBN()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.bval
      0%|          | 0/642 [00:00<?, ?it/s]    100%|##########| 642/642 [00:00<00:00, 566kB/s]
    Downloading sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.bvec
      0%|          | 0/4457 [00:00<?, ?it/s]    100%|##########| 4.35k/4.35k [00:00<00:00, 3.47MB/s]
    Downloading sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.nii.gz
      0%|          | 0/359208318 [00:00<?, ?it/s]      1%|1         | 3.75M/343M [00:00<00:12, 28.7MB/s]      3%|3         | 11.1M/343M [00:00<00:07, 44.2MB/s]      5%|5         | 17.8M/343M [00:00<00:06, 54.0MB/s]      7%|6         | 23.1M/343M [00:00<00:06, 50.7MB/s]      9%|8         | 29.2M/343M [00:00<00:06, 51.2MB/s]     10%|#         | 34.4M/343M [00:00<00:06, 52.0MB/s]     12%|#1        | 39.6M/343M [00:00<00:06, 52.8MB/s]     13%|#3        | 44.8M/343M [00:00<00:05, 53.2MB/s]     15%|#4        | 50.1M/343M [00:01<00:05, 53.7MB/s]     16%|#6        | 55.2M/343M [00:01<00:05, 53.7MB/s]     18%|#7        | 60.4M/343M [00:01<00:05, 53.2MB/s]     19%|#9        | 65.9M/343M [00:01<00:05, 54.2MB/s]     21%|##        | 71.1M/343M [00:01<00:05, 54.0MB/s]     22%|##2       | 76.3M/343M [00:01<00:05, 54.2MB/s]     24%|##3       | 81.5M/343M [00:01<00:05, 53.5MB/s]     25%|##5       | 86.6M/343M [00:01<00:05, 53.5MB/s]     27%|##6       | 91.9M/343M [00:01<00:04, 53.8MB/s]     28%|##8       | 97.1M/343M [00:01<00:04, 53.7MB/s]     30%|##9       | 102M/343M [00:02<00:04, 54.0MB/s]      31%|###1      | 108M/343M [00:02<00:04, 54.1MB/s]     33%|###2      | 113M/343M [00:02<00:04, 54.3MB/s]     34%|###4      | 118M/343M [00:02<00:04, 54.5MB/s]     36%|###5      | 123M/343M [00:02<00:04, 54.3MB/s]     38%|###7      | 128M/343M [00:02<00:04, 54.4MB/s]     39%|###9      | 134M/343M [00:02<00:04, 54.3MB/s]     41%|####      | 139M/343M [00:02<00:03, 54.5MB/s]     42%|####2     | 144M/343M [00:02<00:03, 54.3MB/s]     44%|####3     | 149M/343M [00:02<00:03, 54.4MB/s]     45%|####5     | 155M/343M [00:03<00:03, 54.3MB/s]     47%|####6     | 160M/343M [00:03<00:03, 54.5MB/s]     48%|####8     | 165M/343M [00:03<00:03, 54.6MB/s]     50%|####9     | 170M/343M [00:03<00:03, 54.3MB/s]     51%|#####1    | 176M/343M [00:03<00:03, 54.3MB/s]     53%|#####2    | 181M/343M [00:03<00:03, 54.3MB/s]     54%|#####4    | 186M/343M [00:03<00:02, 54.7MB/s]     56%|#####5    | 191M/343M [00:03<00:02, 54.3MB/s]     57%|#####7    | 197M/343M [00:03<00:02, 54.5MB/s]     59%|#####8    | 202M/343M [00:03<00:02, 54.2MB/s]     60%|######    | 207M/343M [00:04<00:02, 54.5MB/s]     62%|######2   | 212M/343M [00:04<00:02, 54.4MB/s]     64%|######3   | 218M/343M [00:04<00:02, 54.2MB/s]     65%|######5   | 223M/343M [00:04<00:02, 54.4MB/s]     67%|######6   | 228M/343M [00:04<00:02, 54.3MB/s]     68%|######8   | 233M/343M [00:04<00:02, 54.7MB/s]     70%|######9   | 239M/343M [00:04<00:02, 54.2MB/s]     71%|#######1  | 244M/343M [00:04<00:01, 54.3MB/s]     73%|#######2  | 249M/343M [00:04<00:01, 54.2MB/s]     74%|#######4  | 254M/343M [00:04<00:01, 54.5MB/s]     76%|#######5  | 260M/343M [00:05<00:01, 51.3MB/s]     77%|#######7  | 265M/343M [00:05<00:01, 52.5MB/s]     79%|#######8  | 270M/343M [00:05<00:01, 52.5MB/s]     80%|########  | 275M/343M [00:05<00:01, 53.5MB/s]     82%|########1 | 280M/343M [00:05<00:01, 53.5MB/s]     83%|########3 | 286M/343M [00:05<00:01, 54.2MB/s]     85%|########4 | 291M/343M [00:05<00:00, 54.2MB/s]     86%|########6 | 296M/343M [00:05<00:00, 54.1MB/s]     88%|########8 | 302M/343M [00:05<00:00, 54.2MB/s]     90%|########9 | 307M/343M [00:06<00:00, 54.2MB/s]     91%|#########1| 312M/343M [00:06<00:00, 54.0MB/s]     93%|#########2| 317M/343M [00:06<00:00, 54.1MB/s]     94%|#########4| 323M/343M [00:06<00:00, 55.0MB/s]     96%|#########5| 328M/343M [00:06<00:00, 54.5MB/s]     97%|#########7| 333M/343M [00:06<00:00, 54.9MB/s]     99%|#########8| 339M/343M [00:06<00:00, 54.3MB/s]    100%|##########| 343M/343M [00:06<00:00, 53.7MB/s]
    Downloading sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-brain_mask.nii.gz
      0%|          | 0/13243 [00:00<?, ?it/s]    100%|##########| 12.9k/12.9k [00:00<00:00, 9.85MB/s]
    Downloading sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.json
      0%|          | 0/3250 [00:00<?, ?it/s]    100%|##########| 3.17k/3.17k [00:00<00:00, 2.50MB/s]
    Downloading QSIprep/dataset_description.json
      0%|          | 0/499 [00:00<?, ?it/s]    100%|##########| 499/499 [00:00<00:00, 365kB/s]
    Downloading HBN/dataset_description.json
      0%|          | 0/60 [00:00<?, ?it/s]    100%|##########| 60.0/60.0 [00:00<00:00, 44.9kB/s]
    The following HBN files are available:
    HBN/
    ├─dataset_description.json
    ├─derivatives/
    │ └─QSIprep/
    │   ├─dataset_description.json
    │   └─sub-NDARYM277DEA/
    │     └─ses-HBNsiteCBIC/
    │       └─dwi/
    │         ├─sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.json
    │         ├─sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.bval
    │         ├─sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.nii.gz
    │         ├─sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-brain_mask.nii.gz
    │         └─sub-NDARYM277DEA_ses-HBNsiteCBIC_acq-64dir_space-T1w_desc-preproc_dwi.bvec
    └─source-HBN_desc-qsiprep_participants.tsv




.. GENERATED FROM PYTHON SOURCE LINES 64-74

Importantly, this ``function`` does not only obtain the ``participant``'s ``QSIprep`` output, but
also obtains the ``dataset_description.json`` and generates the ``data json sidecar`` ``file`` required by
`BIDS common derivatives <https://bids-specification.readthedocs.io/en/stable/05-derivatives/02-common-data-types.html>`_.
The latter is achieved by downloading the
`respective raw data json sidecar file <https://fcp-indi.s3.amazonaws.com/index.html#data/Projects/HBN/BIDS_curated/sub-NDAREK918EC2/ses-HBNsiteSI/dwi/>`_ and appending the needed ``inheritance-related`` & ``spatial reference-related`` information.

With that, we have a feasible ``HBN sub-dataset``, confirming to
`BIDS common derivatives <https://bids-specification.readthedocs.io/en/stable/05-derivatives/02-common-data-types.html>`_,
as well as
`inputs required by BEP16 <https://github.com/bids-standard/bids-bep016/pull/24/files>`_ and respective further processing.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.664 seconds)


.. _sphx_glr_download_auto_examples_plot_HBN_download.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_HBN_download.py <plot_HBN_download.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_HBN_download.ipynb <plot_HBN_download.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
